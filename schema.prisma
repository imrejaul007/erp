// Perfume & Oud ERP System - Comprehensive Prisma Schema
// Supports UAE business requirements (VAT 5%, AED currency, multi-language)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER & AUTH MODELS
// ============================================================================

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  username    String    @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  avatar      String?
  isActive    Boolean   @default(true)
  language    String    @default("en") // en, ar for UAE support
  timezone    String    @default("Asia/Dubai")
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  roles               UserRole[]
  createdTransactions Transaction[]     @relation("CreatedBy")
  updatedTransactions Transaction[]     @relation("UpdatedBy")
  createdSales        Sale[]            @relation("CreatedBy")
  updatedSales        Sale[]            @relation("UpdatedBy")
  stockMovements      StockMovement[]
  productionBatches   ProductionBatch[]
  qualityControls     QualityControl[]
  storeAssignments    UserStore[]
  ProcessingStage     ProcessingStage[]

  // Supply Chain Relations
  requestedPurchaseOrders PurchaseOrder[]      @relation("RequestedBy")
  approvedPurchaseOrders  PurchaseOrder[]      @relation("ApprovedBy")
  goodsReceipts           GoodsReceipt[]
  supplierEvaluations     SupplierEvaluation[]
  qualityChecks           QualityCheck[]
  shipmentDocuments       ShipmentDocument[]
  requestedProcurements   ProcurementRequest[] @relation("ProcurementRequestedBy")
  approvedProcurements    ProcurementRequest[] @relation("ProcurementApprovedBy")

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  module      String // inventory, production, sales, finance, etc.
  action      String // create, read, update, delete, manage
  createdAt   DateTime @default(now())

  // Relations
  roles RolePermission[]

  @@map("permissions")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// ============================================================================
// STORE & LOCATION MODELS
// ============================================================================

model Store {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  nameAr      String? // Arabic name support
  address     String
  city        String
  emirate     String // UAE emirates
  country     String   @default("UAE")
  postalCode  String?
  phone       String?
  email       String?
  isActive    Boolean  @default(true)
  isWarehouse Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  inventory     StoreInventory[]
  sales         Sale[]
  transfersFrom Transfer[]       @relation("FromStore")
  transfersTo   Transfer[]       @relation("ToStore")
  users         UserStore[]
  StockMovement StockMovement[]

  // Supply Chain Relations
  purchaseOrders      PurchaseOrder[]
  procurementRequests ProcurementRequest[]
  reorderPoints       ReorderPoint[]

  @@map("stores")
}

model UserStore {
  id         String   @id @default(cuid())
  userId     String
  storeId    String
  isDefault  Boolean  @default(false)
  assignedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([userId, storeId])
  @@map("user_stores")
}

model Transfer {
  id            String         @id @default(cuid())
  transferNo    String         @unique
  fromStoreId   String
  toStoreId     String
  status        TransferStatus @default(PENDING)
  notes         String?
  transferDate  DateTime       @default(now())
  completedDate DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  fromStore Store @relation("FromStore", fields: [fromStoreId], references: [id])
  toStore   Store @relation("ToStore", fields: [toStoreId], references: [id])

  // Relations
  items TransferItem[]

  @@map("transfers")
}

model TransferItem {
  id             String  @id @default(cuid())
  transferId     String
  rawMaterialId  String?
  productId      String?
  requestedQty   Decimal
  transferredQty Decimal @default(0)
  unit           String
  notes          String?

  transfer    Transfer     @relation(fields: [transferId], references: [id], onDelete: Cascade)
  rawMaterial RawMaterial? @relation(fields: [rawMaterialId], references: [id])
  product     Product?     @relation(fields: [productId], references: [id])

  @@map("transfer_items")
}

// ============================================================================
// INVENTORY MODELS
// ============================================================================

model RawMaterial {
  id            String   @id @default(cuid())
  code          String   @unique
  name          String
  nameAr        String? // Arabic name
  description   String?
  category      String
  subcategory   String?
  baseUnit      String // grams, ml, pieces
  costPrice     Decimal  @default(0)
  currency      String   @default("AED")
  supplier      String?
  supplierCode  String?
  minStockLevel Decimal  @default(0)
  maxStockLevel Decimal?
  shelfLife     Int? // days
  storageTemp   String? // storage temperature requirements

  // Supply Chain Fields
  hsCodeId   String? // Harmonized System Code for international trade
  supplierId String? // Primary supplier

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  batches           Batch[]
  storeInventory    StoreInventory[]
  stockMovements    StockMovement[]
  bomItems          BillOfMaterialsItem[]
  conversions       ConversionUnit[]      @relation("FromUnit")
  conversionTargets ConversionUnit[]      @relation("ToUnit")
  transferItems     TransferItem[]

  // Supply Chain Relations
  hsCode                  HSCode?                  @relation(fields: [hsCodeId], references: [id])
  primarySupplier         Supplier?                @relation("SupplierRawMaterials", fields: [supplierId], references: [id])
  supplierProducts        SupplierProduct[]
  purchaseOrderItems      PurchaseOrderItem[]
  procurementRequestItems ProcurementRequestItem[]
  reorderPoints           ReorderPoint[]

  @@map("raw_materials")
}

model Batch {
  id              String    @id @default(cuid())
  batchNo         String    @unique
  rawMaterialId   String
  origin          String // Country/region of origin
  grade           String // A, B, C or custom grading
  quality         String? // Additional quality notes
  purchaseDate    DateTime
  expiryDate      DateTime?
  purchasePrice   Decimal
  quantity        Decimal
  unit            String
  supplier        String
  supplierInvoice String?
  notes           String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  rawMaterial RawMaterial @relation(fields: [rawMaterialId], references: [id])

  // Relations
  stockMovements    StockMovement[]
  productionBatches ProductionBatchRawMaterial[]

  @@map("batches")
}

model Product {
  id            String   @id @default(cuid())
  code          String   @unique
  name          String
  nameAr        String? // Arabic name
  description   String?
  category      String
  subcategory   String?
  baseUnit      String // ml, pieces, sets
  costPrice     Decimal  @default(0)
  sellingPrice  Decimal  @default(0)
  currency      String   @default("AED")
  vatRate       Decimal  @default(5) // UAE VAT rate
  minStockLevel Decimal  @default(0)
  maxStockLevel Decimal?
  shelfLife     Int? // days
  barcode       String?
  sku           String?  @unique
  imageUrl      String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  recipes           Recipe[]
  storeInventory    StoreInventory[]
  stockMovements    StockMovement[]
  saleItems         SaleItem[]
  transferItems     TransferItem[]
  productionBatches ProductionBatch[]

  // Supply Chain Relations
  supplierProducts        SupplierProduct[]
  purchaseOrderItems      PurchaseOrderItem[]
  procurementRequestItems ProcurementRequestItem[]
  reorderPoints           ReorderPoint[]

  @@map("products")
}

model StoreInventory {
  id            String   @id @default(cuid())
  storeId       String
  rawMaterialId String?
  productId     String?
  quantity      Decimal  @default(0)
  reservedQty   Decimal  @default(0) // Reserved for orders/production
  unit          String
  lastUpdated   DateTime @default(now())

  store       Store        @relation(fields: [storeId], references: [id])
  rawMaterial RawMaterial? @relation(fields: [rawMaterialId], references: [id])
  product     Product?     @relation(fields: [productId], references: [id])

  @@unique([storeId, rawMaterialId])
  @@unique([storeId, productId])
  @@map("store_inventory")
}

model StockMovement {
  id            String            @id @default(cuid())
  movementNo    String            @unique
  type          StockMovementType
  storeId       String?
  rawMaterialId String?
  productId     String?
  batchId       String?
  quantity      Decimal
  unit          String
  unitCost      Decimal?
  totalCost     Decimal?
  currency      String            @default("AED")
  reason        String?
  referenceType String? // sale, purchase, production, transfer, adjustment
  referenceId   String?
  notes         String?
  movementDate  DateTime          @default(now())
  createdById   String
  createdAt     DateTime          @default(now())

  store       Store?       @relation(fields: [storeId], references: [id])
  rawMaterial RawMaterial? @relation(fields: [rawMaterialId], references: [id])
  product     Product?     @relation(fields: [productId], references: [id])
  batch       Batch?       @relation(fields: [batchId], references: [id])
  createdBy   User         @relation(fields: [createdById], references: [id])

  @@index([movementDate])
  @@index([type])
  @@index([referenceType, referenceId])
  @@map("stock_movements")
}

model ConversionUnit {
  id             String   @id @default(cuid())
  fromUnitId     String
  toUnitId       String
  conversionRate Decimal // Rate to convert from unit to to unit
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  fromUnit RawMaterial @relation("FromUnit", fields: [fromUnitId], references: [id])
  toUnit   RawMaterial @relation("ToUnit", fields: [toUnitId], references: [id])

  @@unique([fromUnitId, toUnitId])
  @@map("conversion_units")
}

// ============================================================================
// PRODUCTION MODELS
// ============================================================================

model Recipe {
  id           String   @id @default(cuid())
  productId    String
  version      String   @default("1.0")
  name         String
  description  String?
  yieldQty     Decimal // Expected output quantity
  yieldUnit    String
  instructions String?
  notes        String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])

  // Relations
  billOfMaterials BillOfMaterials[]
  ProductionBatch ProductionBatch[]

  @@unique([productId, version])
  @@map("recipes")
}

model BillOfMaterials {
  id        String   @id @default(cuid())
  recipeId  String
  name      String
  version   String   @default("1.0")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipe Recipe @relation(fields: [recipeId], references: [id])

  // Relations
  items BillOfMaterialsItem[]

  @@map("bill_of_materials")
}

model BillOfMaterialsItem {
  id             String  @id @default(cuid())
  bomId          String
  rawMaterialId  String
  quantity       Decimal
  unit           String
  wastagePercent Decimal @default(0)
  notes          String?
  sortOrder      Int     @default(0)

  bom         BillOfMaterials @relation(fields: [bomId], references: [id], onDelete: Cascade)
  rawMaterial RawMaterial     @relation(fields: [rawMaterialId], references: [id])

  @@map("bill_of_materials_items")
}

model ProductionBatch {
  id             String           @id @default(cuid())
  batchNo        String           @unique
  productId      String
  recipeId       String?
  plannedQty     Decimal
  actualQty      Decimal          @default(0)
  unit           String
  status         ProductionStatus @default(PLANNED)
  startDate      DateTime?
  completionDate DateTime?
  cost           Decimal          @default(0)
  currency       String           @default("AED")
  notes          String?
  supervisorId   String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  product    Product @relation(fields: [productId], references: [id])
  recipe     Recipe? @relation(fields: [recipeId], references: [id])
  supervisor User    @relation(fields: [supervisorId], references: [id])

  // Relations
  stages          ProcessingStage[]
  rawMaterials    ProductionBatchRawMaterial[]
  qualityControls QualityControl[]

  @@map("production_batches")
}

model ProductionBatchRawMaterial {
  id                String  @id @default(cuid())
  productionBatchId String
  batchId           String
  plannedQty        Decimal
  actualQty         Decimal @default(0)
  unit              String
  cost              Decimal @default(0)

  productionBatch ProductionBatch @relation(fields: [productionBatchId], references: [id], onDelete: Cascade)
  batch           Batch           @relation(fields: [batchId], references: [id])

  @@unique([productionBatchId, batchId])
  @@map("production_batch_raw_materials")
}

model ProcessingStage {
  id                String           @id @default(cuid())
  productionBatchId String
  stageName         String
  stageOrder        Int
  status            ProcessingStatus @default(PENDING)
  startTime         DateTime?
  endTime           DateTime?
  duration          Int? // minutes
  temperature       String?
  notes             String?
  operatorId        String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  productionBatch ProductionBatch @relation(fields: [productionBatchId], references: [id], onDelete: Cascade)
  operator        User?           @relation(fields: [operatorId], references: [id])

  @@map("processing_stages")
}

model QualityControl {
  id                String        @id @default(cuid())
  productionBatchId String
  checkType         String // fragrance, alcohol_percentage, aging, visual
  result            QualityResult
  alcoholPercentage Decimal?
  fragranceNotes    String?
  agingDays         Int?
  visualInspection  String?
  testDate          DateTime      @default(now())
  testedById        String
  notes             String?
  recommendations   String?
  createdAt         DateTime      @default(now())

  productionBatch ProductionBatch @relation(fields: [productionBatchId], references: [id])
  testedBy        User            @relation(fields: [testedById], references: [id])

  @@map("quality_controls")
}

// ============================================================================
// CUSTOMER MODELS
// ============================================================================

model Customer {
  id          String       @id @default(cuid())
  customerNo  String       @unique
  type        CustomerType @default(INDIVIDUAL)
  firstName   String?
  lastName    String?
  companyName String?
  email       String?      @unique
  phone       String?
  whatsapp    String?
  dateOfBirth DateTime?
  gender      Gender?
  nationality String?
  address     String?
  city        String?
  emirate     String?
  country     String       @default("UAE")
  postalCode  String?
  vatNumber   String? // For corporate customers
  isActive    Boolean      @default(true)
  language    String       @default("en")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  sales           Sale[]
  loyaltyPrograms CustomerLoyalty[]
  segments        CustomerSegmentMember[]

  @@map("customers")
}

model CustomerSegment {
  id          String   @id @default(cuid())
  name        String   @unique
  nameAr      String?
  description String?
  criteria    Json // JSON criteria for auto-assignment
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members CustomerSegmentMember[]

  @@map("customer_segments")
}

model CustomerSegmentMember {
  id         String   @id @default(cuid())
  customerId String
  segmentId  String
  assignedAt DateTime @default(now())

  customer Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  segment  CustomerSegment @relation(fields: [segmentId], references: [id], onDelete: Cascade)

  @@unique([customerId, segmentId])
  @@map("customer_segment_members")
}

model LoyaltyProgram {
  id             String    @id @default(cuid())
  name           String    @unique
  nameAr         String?
  description    String?
  pointsPerAED   Decimal   @default(1) // Points earned per AED spent
  redemptionRate Decimal   @default(1) // AED value per point
  minSpendAmount Decimal   @default(0)
  isActive       Boolean   @default(true)
  startDate      DateTime
  endDate        DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  customers CustomerLoyalty[]

  @@map("loyalty_programs")
}

model CustomerLoyalty {
  id               String   @id @default(cuid())
  customerId       String
  loyaltyProgramId String
  points           Int      @default(0)
  totalSpent       Decimal  @default(0)
  totalEarned      Int      @default(0)
  totalRedeemed    Int      @default(0)
  joinedAt         DateTime @default(now())
  lastActivity     DateTime @default(now())

  customer       Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  loyaltyProgram LoyaltyProgram @relation(fields: [loyaltyProgramId], references: [id])

  @@unique([customerId, loyaltyProgramId])
  @@map("customer_loyalty")
}

// ============================================================================
// SALES MODELS
// ============================================================================

model Sale {
  id             String        @id @default(cuid())
  saleNo         String        @unique
  storeId        String
  customerId     String?
  status         SaleStatus    @default(PENDING)
  saleDate       DateTime      @default(now())
  dueDate        DateTime?
  subtotal       Decimal       @default(0)
  discountAmount Decimal       @default(0)
  vatAmount      Decimal       @default(0)
  totalAmount    Decimal       @default(0)
  currency       String        @default("AED")
  paymentStatus  PaymentStatus @default(PENDING)
  paymentMethod  String?
  notes          String?
  createdById    String
  updatedById    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  store     Store     @relation(fields: [storeId], references: [id])
  customer  Customer? @relation(fields: [customerId], references: [id])
  createdBy User      @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy User?     @relation("UpdatedBy", fields: [updatedById], references: [id])

  // Relations
  items      SaleItem[]
  invoices   Invoice[]
  payments   Payment[]
  promotions SalePromotion[]

  @@index([saleDate])
  @@index([status])
  @@map("sales")
}

model SaleItem {
  id              String  @id @default(cuid())
  saleId          String
  productId       String
  quantity        Decimal
  unit            String
  unitPrice       Decimal
  discountPercent Decimal @default(0)
  discountAmount  Decimal @default(0)
  vatRate         Decimal @default(5)
  vatAmount       Decimal @default(0)
  totalAmount     Decimal
  notes           String?

  sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("sale_items")
}

model Invoice {
  id          String        @id @default(cuid())
  invoiceNo   String        @unique
  saleId      String
  issueDate   DateTime      @default(now())
  dueDate     DateTime?
  status      InvoiceStatus @default(DRAFT)
  subtotal    Decimal
  vatAmount   Decimal
  totalAmount Decimal
  currency    String        @default("AED")
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  sale Sale @relation(fields: [saleId], references: [id])

  @@map("invoices")
}

model Payment {
  id          String        @id @default(cuid())
  paymentNo   String        @unique
  saleId      String
  amount      Decimal
  currency    String        @default("AED")
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  paymentDate DateTime      @default(now())
  reference   String? // Bank reference, card last 4 digits, etc.
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  sale Sale @relation(fields: [saleId], references: [id])

  @@map("payments")
}

model Promotion {
  id                String        @id @default(cuid())
  code              String        @unique
  name              String
  nameAr            String?
  description       String?
  type              PromotionType
  discountPercent   Decimal?
  discountAmount    Decimal?
  minPurchaseAmount Decimal?
  maxDiscountAmount Decimal?
  startDate         DateTime
  endDate           DateTime
  usageLimit        Int?
  usageCount        Int           @default(0)
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  sales SalePromotion[]

  @@map("promotions")
}

model SalePromotion {
  id             String  @id @default(cuid())
  saleId         String
  promotionId    String
  discountAmount Decimal

  sale      Sale      @relation(fields: [saleId], references: [id], onDelete: Cascade)
  promotion Promotion @relation(fields: [promotionId], references: [id])

  @@unique([saleId, promotionId])
  @@map("sale_promotions")
}

// ============================================================================
// FINANCE MODELS
// ============================================================================

model Account {
  id        String      @id @default(cuid())
  code      String      @unique
  name      String
  nameAr    String?
  type      AccountType
  currency  String      @default("AED")
  balance   Decimal     @default(0)
  isActive  Boolean     @default(true)
  parentId  String? // For account hierarchy
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  parent       Account?      @relation("AccountHierarchy", fields: [parentId], references: [id])
  children     Account[]     @relation("AccountHierarchy")
  transactions Transaction[]

  @@map("accounts")
}

model Transaction {
  id              String            @id @default(cuid())
  transactionNo   String            @unique
  type            TransactionType
  accountId       String
  amount          Decimal
  currency        String            @default("AED")
  description     String
  referenceType   String? // sale, purchase, expense, etc.
  referenceId     String?
  transactionDate DateTime          @default(now())
  vatAmount       Decimal           @default(0)
  status          TransactionStatus @default(PENDING)
  createdById     String
  updatedById     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  account   Account @relation(fields: [accountId], references: [id])
  createdBy User    @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy User?   @relation("UpdatedBy", fields: [updatedById], references: [id])

  @@index([transactionDate])
  @@index([type])
  @@index([referenceType, referenceId])
  @@map("transactions")
}

model VATRecord {
  id            String    @id @default(cuid())
  recordNo      String    @unique
  type          VATType
  amount        Decimal
  vatAmount     Decimal
  vatRate       Decimal   @default(5)
  currency      String    @default("AED")
  description   String
  referenceType String
  referenceId   String
  recordDate    DateTime  @default(now())
  period        String // YYYY-MM format
  status        VATStatus @default(ACTIVE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([period])
  @@index([type])
  @@map("vat_records")
}

model ProfitTracking {
  id          String   @id @default(cuid())
  period      String // YYYY-MM format
  revenue     Decimal  @default(0)
  cogs        Decimal  @default(0) // Cost of Goods Sold
  grossProfit Decimal  @default(0)
  expenses    Decimal  @default(0)
  netProfit   Decimal  @default(0)
  currency    String   @default("AED")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([period])
  @@map("profit_tracking")
}

// ============================================================================
// ENUMS
// ============================================================================

enum TransferStatus {
  PENDING
  IN_TRANSIT
  COMPLETED
  CANCELLED
}

enum StockMovementType {
  IN // Stock received
  OUT // Stock issued/sold
  TRANSFER_IN
  TRANSFER_OUT
  ADJUSTMENT // Manual adjustment
  PRODUCTION_IN // From production
  PRODUCTION_OUT // Used in production
  EXPIRED // Expired stock removal
  DAMAGED // Damaged stock removal
}

enum ProductionStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum ProcessingStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum QualityResult {
  PASSED
  FAILED
  CONDITIONAL
  PENDING
}

enum CustomerType {
  INDIVIDUAL
  CORPORATE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum SaleStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  CHEQUE
  DIGITAL_WALLET
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum PromotionType {
  PERCENTAGE
  FIXED_AMOUNT
  BUY_X_GET_Y
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum TransactionType {
  DEBIT
  CREDIT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum VATType {
  INPUT // VAT on purchases
  OUTPUT // VAT on sales
}

enum VATStatus {
  ACTIVE
  REVERSED
  CANCELLED
}

// ============================================================================
// SUPPLY CHAIN & PROCUREMENT MODELS
// ============================================================================

model Supplier {
  id            String       @id @default(cuid())
  code          String       @unique
  name          String
  nameAr        String? // Arabic name support
  type          SupplierType @default(LOCAL)
  category      String // Raw materials, Packaging, Services, etc.
  contactPerson String?
  email         String?
  phone         String?
  whatsapp      String?
  website       String?

  // Address Details
  address    String?
  city       String?
  state      String?
  country    String
  postalCode String?

  // Business Details
  vatNumber       String?
  tradeNumber     String?
  licenseNumber   String?
  establishedYear Int?

  // Performance Metrics
  performanceScore Decimal @default(0) // 0-100 scale
  rating           Decimal @default(0) // 0-5 stars
  totalOrders      Int     @default(0)
  onTimeDeliveries Int     @default(0)
  qualityScore     Decimal @default(0) // 0-100 scale
  responseTime     Int     @default(0) // Average response time in hours

  // Financial Terms
  paymentTerms    String? // Net 30, Net 60, etc.
  creditLimit     Decimal @default(0)
  currency        String  @default("AED")
  discountPercent Decimal @default(0)

  // Compliance & Certifications
  certifications   Json? // Array of certifications
  complianceStatus ComplianceStatus @default(PENDING)
  lastAuditDate    DateTime?
  nextAuditDate    DateTime?

  // Operational Details
  leadTime      Int      @default(0) // Days
  minOrderValue Decimal  @default(0)
  isPreferred   Boolean  @default(false)
  isActive      Boolean  @default(true)
  tags          String[] // Searchable tags
  notes         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  purchaseOrders          PurchaseOrder[]
  supplierProducts        SupplierProduct[]
  evaluations             SupplierEvaluation[]
  shipments               Shipment[]
  invoices                SupplierInvoice[]
  rawMaterials            RawMaterial[]            @relation("SupplierRawMaterials")
  procurementRequestItems ProcurementRequestItem[]

  @@map("suppliers")
}

model SupplierProduct {
  id            String   @id @default(cuid())
  supplierId    String
  rawMaterialId String?
  productId     String?
  supplierSku   String? // Supplier's product code
  supplierName  String // Supplier's name for the product
  unitPrice     Decimal
  currency      String   @default("AED")
  minOrderQty   Decimal  @default(1)
  leadTime      Int      @default(0) // Days
  isPreferred   Boolean  @default(false)
  isActive      Boolean  @default(true)
  lastUpdated   DateTime @default(now())

  supplier    Supplier     @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  rawMaterial RawMaterial? @relation(fields: [rawMaterialId], references: [id])
  product     Product?     @relation(fields: [productId], references: [id])

  @@unique([supplierId, rawMaterialId])
  @@unique([supplierId, productId])
  @@map("supplier_products")
}

model PurchaseOrder {
  id            String  @id @default(cuid())
  poNumber      String  @unique
  supplierId    String
  requestedById String
  approvedById  String?
  storeId       String? // Delivery location

  status   PurchaseOrderStatus @default(DRAFT)
  priority Priority            @default(MEDIUM)
  type     PurchaseOrderType   @default(REGULAR)

  // Dates
  orderDate     DateTime  @default(now())
  requestedDate DateTime
  expectedDate  DateTime?
  deliveryDate  DateTime?

  // Financial
  subtotal       Decimal @default(0)
  discountAmount Decimal @default(0)
  vatAmount      Decimal @default(0)
  shippingCost   Decimal @default(0)
  totalAmount    Decimal @default(0)
  currency       String  @default("AED")

  // Terms & Conditions
  paymentTerms  String?
  deliveryTerms String? // FOB, CIF, etc.
  notes         String?
  internalNotes String? // Not visible to supplier

  // Tracking
  approvalWorkflow Json? // Approval history
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  supplier    Supplier @relation(fields: [supplierId], references: [id])
  requestedBy User     @relation("RequestedBy", fields: [requestedById], references: [id])
  approvedBy  User?    @relation("ApprovedBy", fields: [approvedById], references: [id])
  store       Store?   @relation(fields: [storeId], references: [id])

  // Relations
  items     PurchaseOrderItem[]
  receipts  GoodsReceipt[]
  invoices  SupplierInvoice[]
  shipments Shipment[]

  @@index([status])
  @@index([orderDate])
  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String  @id @default(cuid())
  purchaseOrderId String
  rawMaterialId   String?
  productId       String?

  quantity        Decimal
  unit            String
  unitPrice       Decimal
  discountPercent Decimal @default(0)
  discountAmount  Decimal @default(0)
  vatRate         Decimal @default(5)
  vatAmount       Decimal @default(0)
  totalAmount     Decimal

  receivedQty Decimal @default(0)
  pendingQty  Decimal

  specifications String? // Technical specifications
  notes          String?

  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  rawMaterial   RawMaterial?  @relation(fields: [rawMaterialId], references: [id])
  product       Product?      @relation(fields: [productId], references: [id])

  // Relations
  receiptItems GoodsReceiptItem[]

  @@map("purchase_order_items")
}

model GoodsReceipt {
  id              String @id @default(cuid())
  receiptNo       String @unique
  purchaseOrderId String
  receivedById    String

  receiptDate DateTime           @default(now())
  status      GoodsReceiptStatus @default(PENDING)

  totalReceived Decimal @default(0)
  totalAccepted Decimal @default(0)
  totalRejected Decimal @default(0)

  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedBy    User          @relation(fields: [receivedById], references: [id])

  // Relations
  items         GoodsReceiptItem[]
  qualityChecks QualityCheck[]

  @@map("goods_receipts")
}

model GoodsReceiptItem {
  id                  String @id @default(cuid())
  goodsReceiptId      String
  purchaseOrderItemId String

  orderedQty  Decimal
  receivedQty Decimal
  acceptedQty Decimal
  rejectedQty Decimal @default(0)

  batchNo    String?
  expiryDate DateTime?
  quality    QualityGrade?

  rejectReason String?
  notes        String?

  goodsReceipt      GoodsReceipt      @relation(fields: [goodsReceiptId], references: [id], onDelete: Cascade)
  purchaseOrderItem PurchaseOrderItem @relation(fields: [purchaseOrderItemId], references: [id])

  @@map("goods_receipt_items")
}

model Shipment {
  id              String  @id @default(cuid())
  shipmentNo      String  @unique
  purchaseOrderId String?
  supplierId      String

  carrier        ShippingCarrier
  trackingNumber String?
  awbNumber      String? // Air Waybill Number

  status   ShipmentStatus @default(PREPARING)
  priority Priority       @default(MEDIUM)

  // Shipping Details
  originAddress String
  originCity    String
  originCountry String

  destinationAddress String
  destinationCity    String
  destinationCountry String

  // Dates & Times
  shipDate         DateTime?
  estimatedArrival DateTime?
  actualArrival    DateTime?

  // Package Details
  packages    Int      @default(1)
  totalWeight Decimal?
  totalVolume Decimal?
  dimensions  String? // JSON string

  // Costs
  shippingCost Decimal @default(0)
  insurance    Decimal @default(0)
  customsDuty  Decimal @default(0)
  otherCharges Decimal @default(0)
  totalCost    Decimal @default(0)
  currency     String  @default("AED")

  // Import/Export Documentation
  hsCode             String? // Harmonized System Code
  customsDeclaration String?
  commercialInvoice  String? // Document URL
  packingList        String? // Document URL
  certificateOrigin  String? // Document URL
  importLicense      String? // Document URL

  notes         String?
  internalNotes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchaseOrder PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  supplier      Supplier       @relation(fields: [supplierId], references: [id])

  // Relations
  trackingEvents ShipmentTracking[]
  documents      ShipmentDocument[]

  @@index([status])
  @@index([trackingNumber])
  @@map("shipments")
}

model ShipmentTracking {
  id         String @id @default(cuid())
  shipmentId String

  location    String
  status      String
  description String?
  eventDate   DateTime

  latitude  Decimal?
  longitude Decimal?

  createdAt DateTime @default(now())

  shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@map("shipment_tracking")
}

model ShipmentDocument {
  id         String @id @default(cuid())
  shipmentId String

  type     DocumentType
  fileName String
  fileUrl  String
  fileSize Int?
  mimeType String?

  uploadedAt   DateTime @default(now())
  uploadedById String?

  shipment   Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  uploadedBy User?    @relation(fields: [uploadedById], references: [id])

  @@map("shipment_documents")
}

model SupplierInvoice {
  id                String  @id @default(cuid())
  invoiceNo         String  @unique
  supplierInvoiceNo String // Supplier's invoice number
  purchaseOrderId   String?
  supplierId        String

  invoiceDate DateTime
  dueDate     DateTime?
  status      SupplierInvoiceStatus @default(RECEIVED)

  subtotal       Decimal
  discountAmount Decimal @default(0)
  vatAmount      Decimal @default(0)
  totalAmount    Decimal
  paidAmount     Decimal @default(0)
  balanceAmount  Decimal
  currency       String  @default("AED")

  paymentTerms String?
  notes        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchaseOrder PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  supplier      Supplier       @relation(fields: [supplierId], references: [id])

  // Relations
  payments SupplierPayment[]

  @@index([status])
  @@index([dueDate])
  @@map("supplier_invoices")
}

model SupplierPayment {
  id                String @id @default(cuid())
  paymentNo         String @unique
  supplierInvoiceId String

  amount        Decimal
  currency      String        @default("AED")
  paymentMethod PaymentMethod
  paymentDate   DateTime      @default(now())

  reference String? // Bank reference, cheque number, etc.
  notes     String?

  createdAt DateTime @default(now())

  supplierInvoice SupplierInvoice @relation(fields: [supplierInvoiceId], references: [id])

  @@map("supplier_payments")
}

model SupplierEvaluation {
  id            String @id @default(cuid())
  supplierId    String
  evaluatedById String

  period String // YYYY-MM format

  // Performance Metrics (0-100 scale)
  qualityScore       Decimal @default(0)
  deliveryScore      Decimal @default(0)
  serviceScore       Decimal @default(0)
  priceScore         Decimal @default(0)
  communicationScore Decimal @default(0)

  overallScore Decimal @default(0)
  rating       Decimal @default(0) // 0-5 stars

  // Comments
  strengths       String?
  weaknesses      String?
  recommendations String?

  evaluationDate DateTime @default(now())
  createdAt      DateTime @default(now())

  supplier    Supplier @relation(fields: [supplierId], references: [id])
  evaluatedBy User     @relation(fields: [evaluatedById], references: [id])

  @@unique([supplierId, period])
  @@map("supplier_evaluations")
}

model QualityCheck {
  id             String @id @default(cuid())
  goodsReceiptId String
  checkedById    String

  checkType QualityCheckType
  result    QualityResult

  // Specific Checks
  visualInspection   String?
  fragranceProfile   String?
  alcoholContent     Decimal?
  purityTest         String?
  packagingCondition String?

  // Results
  passed Boolean       @default(false)
  grade  QualityGrade?

  notes           String?
  recommendations String?

  checkDate DateTime @default(now())
  createdAt DateTime @default(now())

  goodsReceipt GoodsReceipt @relation(fields: [goodsReceiptId], references: [id])
  checkedBy    User         @relation(fields: [checkedById], references: [id])

  @@map("quality_checks")
}

model ProcurementRequest {
  id            String  @id @default(cuid())
  requestNo     String  @unique
  requestedById String
  approvedById  String?
  storeId       String?

  type     ProcurementRequestType   @default(REGULAR)
  priority Priority                 @default(MEDIUM)
  status   ProcurementRequestStatus @default(PENDING)

  requestDate  DateTime @default(now())
  requiredDate DateTime

  justification String?
  notes         String?

  totalEstimatedCost Decimal @default(0)
  currency           String  @default("AED")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requestedBy User   @relation("ProcurementRequestedBy", fields: [requestedById], references: [id])
  approvedBy  User?  @relation("ProcurementApprovedBy", fields: [approvedById], references: [id])
  store       Store? @relation(fields: [storeId], references: [id])

  // Relations
  items ProcurementRequestItem[]

  @@map("procurement_requests")
}

model ProcurementRequestItem {
  id                   String  @id @default(cuid())
  procurementRequestId String
  rawMaterialId        String?
  productId            String?

  quantity            Decimal
  unit                String
  estimatedUnitPrice  Decimal @default(0)
  estimatedTotalPrice Decimal @default(0)

  specifications String?
  justification  String?

  suggestedSupplierId String?

  procurementRequest ProcurementRequest @relation(fields: [procurementRequestId], references: [id], onDelete: Cascade)
  rawMaterial        RawMaterial?       @relation(fields: [rawMaterialId], references: [id])
  product            Product?           @relation(fields: [productId], references: [id])
  suggestedSupplier  Supplier?          @relation(fields: [suggestedSupplierId], references: [id])

  @@map("procurement_request_items")
}

model ReorderPoint {
  id            String  @id @default(cuid())
  storeId       String?
  rawMaterialId String?
  productId     String?

  minLevel     Decimal
  maxLevel     Decimal
  reorderLevel Decimal
  reorderQty   Decimal

  leadTime    Int     @default(0) // Days
  safetyStock Decimal @default(0)

  isActive      Boolean   @default(true)
  lastTriggered DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store       Store?       @relation(fields: [storeId], references: [id])
  rawMaterial RawMaterial? @relation(fields: [rawMaterialId], references: [id])
  product     Product?     @relation(fields: [productId], references: [id])

  @@unique([storeId, rawMaterialId])
  @@unique([storeId, productId])
  @@map("reorder_points")
}

model HSCode {
  id          String  @id @default(cuid())
  code        String  @unique
  description String
  dutyRate    Decimal @default(0) // UAE import duty rate
  vatRate     Decimal @default(5) // UAE VAT rate

  // Restrictions & Requirements
  restrictions String? // Import restrictions/licenses required
  documents    String[] // Required documents

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  rawMaterials RawMaterial[]

  @@map("hs_codes")
}

// ============================================================================
// SUPPLY CHAIN ENUMS
// ============================================================================

enum SupplierType {
  LOCAL // UAE suppliers
  REGIONAL // GCC suppliers
  INTERNATIONAL // Global suppliers
  MANUFACTURER
  DISTRIBUTOR
  AGENT
}

enum ComplianceStatus {
  PENDING
  APPROVED
  CONDITIONAL
  REJECTED
  EXPIRED
}

enum PurchaseOrderStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  SENT
  ACKNOWLEDGED
  PARTIALLY_RECEIVED
  RECEIVED
  COMPLETED
  CANCELLED
}

enum PurchaseOrderType {
  REGULAR
  URGENT
  BLANKET // Framework agreement
  CONTRACT // Long-term contract
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum GoodsReceiptStatus {
  PENDING
  PARTIALLY_RECEIVED
  RECEIVED
  QUALITY_CHECK
  ACCEPTED
  REJECTED
}

enum QualityGrade {
  A_PREMIUM
  B_STANDARD
  C_BASIC
  REJECTED
}

enum QualityCheckType {
  VISUAL
  FRAGRANCE
  CHEMICAL
  PACKAGING
  DOCUMENTATION
  COMPLETE
}

enum ShippingCarrier {
  ARAMEX
  DHL
  FEDEX
  UPS
  EMIRATES_POST
  ROAD_TRANSPORT
  SEA_FREIGHT
  AIR_FREIGHT
  OTHER
}

enum ShipmentStatus {
  PREPARING
  DISPATCHED
  IN_TRANSIT
  CUSTOMS_CLEARANCE
  OUT_FOR_DELIVERY
  DELIVERED
  DELAYED
  CANCELLED
  RETURNED
}

enum DocumentType {
  COMMERCIAL_INVOICE
  PACKING_LIST
  CERTIFICATE_ORIGIN
  IMPORT_LICENSE
  CUSTOMS_DECLARATION
  INSPECTION_CERTIFICATE
  INSURANCE_CERTIFICATE
  BILL_OF_LADING
  AIR_WAYBILL
  OTHER
}

enum SupplierInvoiceStatus {
  RECEIVED
  UNDER_REVIEW
  APPROVED
  DISPUTED
  PAID
  OVERDUE
  CANCELLED
}

enum ProcurementRequestType {
  REGULAR
  URGENT
  CAPITAL // Capital expenditure
  SERVICE
  MAINTENANCE
}

enum ProcurementRequestStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  CONVERTED_TO_PO
  CANCELLED
}

// ============================================================================
// BRANDING & CUSTOMIZATION MODELS
// ============================================================================

model Branding {
  id String @id @default(cuid())

  // Company Information
  companyName   String  @default("Oud & Perfume ERP")
  companyNameAr String?
  tagline       String?
  taglineAr     String?

  // Logos & Images
  logoUrl      String? // Main logo
  logoWhiteUrl String? // White logo for dark backgrounds
  faviconUrl   String?
  loginBgUrl   String? // Login page background

  // Primary Colors
  primaryColor String @default("#d97706") // Amber-600
  primaryHover String @default("#b45309") // Amber-700
  accentColor  String @default("#92400e") // Amber-800

  // Background Colors
  bgLight String @default("#fffbeb") // Amber-50
  bgDark  String @default("#1f2937") // Gray-800

  // Text Colors
  textPrimary   String @default("#111827") // Gray-900
  textSecondary String @default("#6b7280") // Gray-500
  textLight     String @default("#ffffff")

  // Status Colors
  successColor String @default("#10b981") // Green
  warningColor String @default("#f59e0b") // Amber
  errorColor   String @default("#ef4444") // Red
  infoColor    String @default("#3b82f6") // Blue

  // Typography
  fontFamily  String @default("Inter")
  headingFont String @default("Inter")
  fontSize    String @default("medium") // small, medium, large

  // Layout
  sidebarStyle String @default("light") // light, dark, colored
  headerStyle  String @default("light")
  borderRadius String @default("medium") // small, medium, large, none

  // Contact Information
  email    String?
  phone    String?
  whatsapp String?
  website  String?
  address  String?
  city     String?
  country  String  @default("UAE")

  // Social Media
  facebookUrl  String?
  instagramUrl String?
  twitterUrl   String?
  linkedinUrl  String?

  // Business Details
  vatNumber     String?
  tradeNumber   String?
  licenseNumber String?

  // Invoice/Receipt Customization
  invoicePrefix   String  @default("INV")
  receiptPrefix   String  @default("RCP")
  orderPrefix     String  @default("ORD")
  invoiceFooter   String?
  invoiceFooterAr String?
  invoiceNotes    String?

  // System Settings
  dateFormat       String @default("DD/MM/YYYY")
  timeFormat       String @default("24h") // 12h, 24h
  currency         String @default("AED")
  currencySymbol   String @default("AED")
  currencyPosition String @default("before") // before, after
  decimalPlaces    Int    @default(2)

  // Feature Toggles
  showWhatsapp    Boolean @default(true)
  showSocial      Boolean @default(true)
  showVatNumber   Boolean @default(true)
  showCompanyInfo Boolean @default(true)

  // Custom CSS
  customCss String? @db.Text

  // Metadata
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("branding")
}
