import { NextRequest } from 'next/server';
import { z } from 'zod';
import { prisma } from '@/lib/prisma';
import { withTenant } from '@/lib/with-tenant';
import { apiResponse, apiError } from '@/lib/api-response';

const InsightCreateSchema = z.object({
  title: z.string().min(1, 'Title is required'),
  description: z.string().min(1, 'Description is required'),
  category: z.enum(['SALES', 'INVENTORY', 'PRODUCTION', 'FINANCIAL', 'CUSTOMER', 'VENDOR', 'QUALITY', 'OPERATIONAL', 'GENERAL']),
  type: z.enum(['TREND', 'ANOMALY', 'OPPORTUNITY', 'RISK', 'ALERT', 'RECOMMENDATION']).default('TREND'),
  severity: z.enum(['CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'INFO']).default('INFO'),
  dataPoints: z.record(z.any()),
  recommendation: z.string().optional(),
  impact: z.string().optional(),
  isAutoGenerated: z.boolean().default(false),
});

/**
 * GET /api/insights - List all data insights for tenant
 */
export const GET = withTenant(async (req: NextRequest, { tenantId }) => {
  try {
    const { searchParams } = new URL(req.url);
    const category = searchParams.get('category');
    const type = searchParams.get('type');
    const severity = searchParams.get('severity');
    const isRead = searchParams.get('isRead');
    const isDismissed = searchParams.get('isDismissed');

    const where: any = { tenantId };
    if (category) where.category = category;
    if (type) where.type = type;
    if (severity) where.severity = severity;
    if (isRead !== null) where.isRead = isRead === 'true';
    if (isDismissed !== null) where.isDismissed = isDismissed === 'true';

    const insights = await prisma.dataInsight.findMany({
      where,
      orderBy: [
        { severity: 'desc' },
        { createdAt: 'desc' },
      ],
    });

    return apiResponse(insights);
  } catch (error: any) {
    console.error('Error fetching insights:', error);
    return apiError(error.message || 'Failed to fetch insights', 500);
  }
});

/**
 * POST /api/insights - Create a new data insight
 */
export const POST = withTenant(async (req: NextRequest, { tenantId, user }) => {
  try {
    const body = await req.json();
    const validated = InsightCreateSchema.parse(body);

    const insight = await prisma.dataInsight.create({
      data: {
        title: validated.title,
        description: validated.description,
        category: validated.category,
        type: validated.type,
        severity: validated.severity,
        dataPoints: validated.dataPoints,
        recommendation: validated.recommendation,
        impact: validated.impact,
        isAutoGenerated: validated.isAutoGenerated,
        generatedAt: validated.isAutoGenerated ? new Date() : null,
        tenantId,
      },
    });

    return apiResponse(
      {
        message: 'Insight created successfully',
        insight,
      },
      201
    );
  } catch (error: any) {
    console.error('Error creating insight:', error);
    if (error instanceof z.ZodError) {
      return apiError(error.errors[0].message, 400);
    }
    return apiError(error.message || 'Failed to create insight', 500);
  }
});
