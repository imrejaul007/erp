// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// User & Authentication Models
model User {
  id            String    @id @default(cuid())
  name          String?
  nameArabic    String?
  email         String    @unique
  emailVerified DateTime?
  phone         String?   @unique
  image         String?
  password      String?
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  accounts           Account[]
  sessions           Session[]
  stores             UserStore[]
  createdCustomers   Customer[]           @relation("CreatedBy")
  managedSuppliers   Supplier[]           @relation("CreatedBy")
  createdProducts    Product[]            @relation("CreatedBy")
  createdOrders      Order[]              @relation("CreatedBy")
  processedPayments  Payment[]            @relation("ProcessedBy")
  createdStores      Store[]              @relation("CreatedBy")
  createdTransfers   Transfer[]           @relation("CreatedBy")
  createdMovements   StockMovement[]      @relation("CreatedBy")
  supervisedBatches  ProductionBatch[]    @relation("SupervisedBy")
  operatedStages     ProcessingStage[]    @relation("OperatedBy")
  assignedComplaints CustomerComplaint[]  @relation("AssignedComplaints")
  samplingSessions   SamplingSession[]    @relation("SamplingStaff")
  testerRefills      TesterRefill[]       @relation("TesterRefilledBy")
  distillationLogs   DistillationLog[]    @relation("DistillationRecordedBy")
  customerFeedback   CustomerFeedback[]   @relation("FeedbackRecordedBy")
  eventStaffAssignments EventStaff[]      @relation("EventStaffAssigned")

  @@index([tenantId])
  @@map("users")
}

model UserStore {
  id      String @id @default(cuid())
  userId  String
  storeId String
  role    StoreRole

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([userId, storeId])
  @@index([tenantId])
  @@map("user_stores")
}

// Core Models
model Customer {
  id              String       @id @default(cuid())
  name            String
  nameArabic      String?
  email           String?      @unique
  phone           String?      @unique
  customerType    CustomerType @default(INDIVIDUAL)
  isVIP           Boolean      @default(false)
  dateOfBirth     DateTime?
  address         String?
  emirate         String?
  city            String?
  loyaltyPoints   Int          @default(0)
  totalSpent      Decimal      @default(0) @db.Decimal(10, 2)
  lastPurchase    DateTime?
  notes           String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  createdById     String

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  createdBy           User                      @relation("CreatedBy", fields: [createdById], references: [id])
  orders              Order[]
  payments            Payment[]
  segments            CustomerSegmentMember[]
  complaints          CustomerComplaint[]
  loyaltyTransactions LoyaltyPointsTransaction[]
  vipEvents           VIPEventAttendee[]
  campaignResponses   CampaignResponse[]
  samplingSessions    SamplingSession[]
  feedbacks           CustomerFeedback[]

  @@index([tenantId])
  @@map("customers")
}

model Supplier {
  id          String   @id @default(cuid())
  name        String
  nameArabic  String?
  email       String?  @unique
  phone       String?
  address     String?
  contactPerson String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  createdBy    User      @relation("CreatedBy", fields: [createdById], references: [id])
  products     Product[]
  purchaseOrders PurchaseOrder[]

  @@index([tenantId])
  @@map("suppliers")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  nameArabic  String?
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  products Product[]

  @@index([tenantId])
  @@map("categories")
}

model Brand {
  id          String    @id @default(cuid())
  name        String
  nameArabic  String?
  description String?
  logoUrl     String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  products Product[]

  @@index([tenantId])
  @@map("brands")
}

model Product {
  id            String      @id @default(cuid())
  name          String
  nameArabic    String?
  description   String?
  sku           String      @unique
  categoryId    String
  brandId       String?
  supplierId    String?
  type          ProductType @default(FINISHED)
  unit          ProductUnit @default(PIECE)
  unitPrice     Decimal     @db.Decimal(10, 2)
  costPrice     Decimal?    @db.Decimal(10, 2)
  stockQuantity Int         @default(0)
  minStock      Int         @default(0)
  maxStock      Int?
  isActive      Boolean     @default(true)
  hasVariants   Boolean     @default(false)
  imageUrl      String?
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  createdById   String

  isVIPExclusive Boolean     @default(false)

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  category       Category           @relation(fields: [categoryId], references: [id])
  brand          Brand?             @relation(fields: [brandId], references: [id])
  supplier       Supplier?          @relation(fields: [supplierId], references: [id])
  createdBy      User               @relation("CreatedBy", fields: [createdById], references: [id])
  orderItems     OrderItem[]
  stockMovements StockMovement[]
  productionBatches ProductionBatch[]
  storeInventory StoreInventory[]
  samplingProducts SamplingProduct[]
  testerStock TesterStock[]
  testerRefills TesterRefill[]
  segregationRawMaterial SegregationBatch[] @relation("SegregationRawMaterial")
  segregationOutputs SegregationOutput[] @relation("SegregationOutputProduct")
  distillationRawWood DistillationBatch[] @relation("DistillationRawWood")
  blendingIngredients BlendingIngredient[] @relation("BlendingIngredient")
  agingBatches AgingBatch[] @relation("AgingProduct")
  feedbacks CustomerFeedback[] @relation("FeedbackProduct")
  eventInventory EventInventory[] @relation("EventInventoryProduct")

  @@index([tenantId])
  @@map("products")
}

// Store Management Models
model Store {
  id          String     @id @default(cuid())
  name        String
  nameArabic  String?
  code        String     @unique
  address     String
  emirate     String
  city        String
  phone       String?
  email       String?
  managerId   String?
  isActive    Boolean    @default(true)
  openingTime String?
  closingTime String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdById String

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  createdBy       User             @relation("CreatedBy", fields: [createdById], references: [id])
  userStores      UserStore[]
  orders          Order[]
  inventory       StoreInventory[]
  fromTransfers   Transfer[]       @relation("FromStore")
  toTransfers     Transfer[]       @relation("ToStore")
  stockMovements  StockMovement[]
  samplingSessions SamplingSession[]

  @@index([tenantId])
  @@map("stores")
}

model StoreInventory {
  id            String   @id @default(cuid())
  storeId       String
  productId     String
  quantity      Int      @default(0)
  reservedQty   Int      @default(0)
  lastUpdated   DateTime @default(now())

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  store   Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([storeId, productId])
  @@index([tenantId])
  @@map("store_inventory")
}

model Transfer {
  id            String        @id @default(cuid())
  fromStoreId   String
  toStoreId     String
  status        TransferStatus @default(PENDING)
  notes         String?
  totalItems    Int           @default(0)
  requestedAt   DateTime      @default(now())
  approvedAt    DateTime?
  shippedAt     DateTime?
  receivedAt    DateTime?
  createdById   String

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  fromStore     Store         @relation("FromStore", fields: [fromStoreId], references: [id])
  toStore       Store         @relation("ToStore", fields: [toStoreId], references: [id])
  createdBy     User          @relation("CreatedBy", fields: [createdById], references: [id])
  items         TransferItem[]

  @@index([tenantId])
  @@map("transfers")
}

model TransferItem {
  id          String @id @default(cuid())
  transferId  String
  productId   String
  quantity    Int
  receivedQty Int?

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  transfer Transfer @relation(fields: [transferId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id])

  @@index([tenantId])
  @@map("transfer_items")
}

// Sales & Order Models
model Order {
  id           String      @id @default(cuid())
  orderNumber  String      @unique
  customerId   String?
  storeId      String
  status       OrderStatus @default(PENDING)
  totalAmount  Decimal     @db.Decimal(10, 2)
  vatAmount    Decimal     @default(0) @db.Decimal(10, 2)
  grandTotal   Decimal     @db.Decimal(10, 2)
  paymentStatus PaymentStatus @default(PENDING)
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdById  String

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  customer            Customer?                @relation(fields: [customerId], references: [id])
  store               Store                    @relation(fields: [storeId], references: [id])
  createdBy           User                     @relation("CreatedBy", fields: [createdById], references: [id])
  items               OrderItem[]
  payments            Payment[]
  complaints          CustomerComplaint[]
  loyaltyTransactions LoyaltyPointsTransaction[]
  giftCardTransactions GiftCardTransaction[]

  @@index([tenantId])
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([tenantId])
  @@map("order_items")
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String?
  customerId    String?
  amount        Decimal       @db.Decimal(10, 2)
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  reference     String?
  notes         String?
  createdAt     DateTime      @default(now())
  processedById String

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  order       Order?    @relation(fields: [orderId], references: [id])
  customer    Customer? @relation(fields: [customerId], references: [id])
  processedBy User      @relation("ProcessedBy", fields: [processedById], references: [id])

  @@index([tenantId])
  @@map("payments")
}

// Purchase Order Models
model PurchaseOrder {
  id           String             @id @default(cuid())
  orderNumber  String             @unique
  supplierId   String
  status       PurchaseOrderStatus @default(PENDING)
  totalAmount  Decimal            @db.Decimal(10, 2)
  notes        String?
  orderDate    DateTime           @default(now())
  expectedDate DateTime?
  receivedDate DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  supplier Supplier            @relation(fields: [supplierId], references: [id])
  items    PurchaseOrderItem[]

  @@index([tenantId])
  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String  @id @default(cuid())
  purchaseOrderId String
  productId       String
  quantity        Int
  unitPrice       Decimal @db.Decimal(10, 2)
  receivedQty     Int     @default(0)

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product       Product       @relation(fields: [productId], references: [id])

  @@index([tenantId])
  @@map("purchase_order_items")
}

// Production Models
model Recipe {
  id            String    @id @default(cuid())
  name          String
  nameArabic    String?
  description   String?
  category      String?
  version       String    @default("1.0")
  isActive      Boolean   @default(true)
  yieldQuantity Decimal   @db.Decimal(10, 3)
  yieldUnit     String
  costPerUnit   Decimal?  @db.Decimal(10, 2)
  instructions  String?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  ingredients       RecipeIngredient[]
  versions          RecipeVersion[]
  boms              BOM[]
  productionBatches ProductionBatch[]

  @@index([tenantId])
  @@map("recipes")
}

model RecipeIngredient {
  id         String  @id @default(cuid())
  recipeId   String
  materialId String
  quantity   Decimal @db.Decimal(10, 3)
  unit       String
  percentage Decimal? @db.Decimal(5, 2)
  isOptional Boolean @default(false)
  notes      String?
  order      Int     @default(0)

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  recipe   Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  material Material @relation(fields: [materialId], references: [id])

  @@index([tenantId])
  @@map("recipe_ingredients")
}

model RecipeVersion {
  id        String   @id @default(cuid())
  recipeId  String
  version   String
  changes   String?
  createdAt DateTime @default(now())
  createdBy String?

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("recipe_versions")
}

model Material {
  id           String   @id @default(cuid())
  name         String
  description  String?
  sku          String   @unique
  categoryId   String
  unitOfMeasure String
  costPerUnit  Decimal  @db.Decimal(10, 2)
  currentStock Decimal  @db.Decimal(10, 3)
  minimumStock Decimal  @db.Decimal(10, 3)
  maximumStock Decimal? @db.Decimal(10, 3)
  supplier     String?
  supplierPrice Decimal? @db.Decimal(10, 2)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  category          Category           @relation(fields: [categoryId], references: [id])
  recipeIngredients RecipeIngredient[]
  bomItems          BOMItem[]
  productionInputs  ProductionInput[]
  productionOutputs ProductionOutput[]
  stockMovements    StockMovement[]
  wastageRecords    WastageRecord[]

  @@index([tenantId])
  @@map("materials")
}

model BOM {
  id        String   @id @default(cuid())
  recipeId  String
  name      String
  version   String
  isActive  Boolean  @default(false)
  totalCost Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  recipe Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  items  BOMItem[]

  @@index([tenantId])
  @@map("boms")
}

model BOMItem {
  id         String  @id @default(cuid())
  bomId      String
  materialId String
  quantity   Decimal @db.Decimal(10, 3)
  unit       String
  unitCost   Decimal @db.Decimal(10, 2)
  totalCost  Decimal @db.Decimal(10, 2)
  notes      String?

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  bom      BOM      @relation(fields: [bomId], references: [id], onDelete: Cascade)
  material Material @relation(fields: [materialId], references: [id])

  @@index([tenantId])
  @@map("bom_items")
}

model ProductionBatch {
  id                String           @id @default(cuid())
  batchNumber       String           @unique
  recipeId          String?
  plannedQuantity   Decimal          @db.Decimal(10, 3)
  actualQuantity    Decimal?         @db.Decimal(10, 3)
  unit              String
  status            ProductionStatus @default(PLANNED)
  startDate         DateTime
  endDate           DateTime?
  agingStartDate    DateTime?
  agingEndDate      DateTime?
  agingDays         Int?
  temperature       Decimal?         @db.Decimal(5, 2)
  humidity          Decimal?         @db.Decimal(5, 2)
  notes             String?
  supervisorId      String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  recipe          Recipe?            @relation(fields: [recipeId], references: [id])
  supervisor      User?              @relation("SupervisedBy", fields: [supervisorId], references: [id])
  inputs          ProductionInput[]
  outputs         ProductionOutput[]
  qualityControls QualityControl[]
  wastageRecords  WastageRecord[]
  processingStages ProcessingStage[]

  @@index([tenantId])
  @@map("production_batches")
}

model ProductionInput {
  id               String   @id @default(cuid())
  batchId          String
  materialId       String
  plannedQuantity  Decimal  @db.Decimal(10, 3)
  actualQuantity   Decimal? @db.Decimal(10, 3)
  unit             String
  costPerUnit      Decimal  @db.Decimal(10, 2)
  totalCost        Decimal  @db.Decimal(10, 2)
  notes            String?
  createdAt        DateTime @default(now())

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  batch    ProductionBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  material Material        @relation(fields: [materialId], references: [id])

  @@index([tenantId])
  @@map("production_inputs")
}

model ProductionOutput {
  id          String   @id @default(cuid())
  batchId     String
  materialId  String
  quantity    Decimal  @db.Decimal(10, 3)
  unit        String
  costPerUnit Decimal  @db.Decimal(10, 2)
  totalCost   Decimal  @db.Decimal(10, 2)
  notes       String?
  createdAt   DateTime @default(now())

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  batch    ProductionBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  material Material        @relation(fields: [materialId], references: [id])

  @@index([tenantId])
  @@map("production_outputs")
}

model QualityControl {
  id        String        @id @default(cuid())
  batchId   String
  testType  String
  testDate  DateTime
  result    QualityResult @default(PENDING)
  score     Decimal?      @db.Decimal(3, 1)
  notes     String?
  testedBy  String?
  images    String?       // JSON array of image URLs
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  batch ProductionBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("quality_controls")
}

model WastageRecord {
  id         String   @id @default(cuid())
  batchId    String?
  materialId String?
  quantity   Decimal  @db.Decimal(10, 3)
  unit       String
  reason     String
  cost       Decimal  @db.Decimal(10, 2)
  recordedAt DateTime
  notes      String?
  createdAt  DateTime @default(now())

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  batch    ProductionBatch? @relation(fields: [batchId], references: [id], onDelete: Cascade)
  material Material?        @relation(fields: [materialId], references: [id])

  @@index([tenantId])
  @@map("wastage_records")
}

model ProcessingStage {
  id                String      @id @default(cuid())
  productionBatchId String
  stageName         String
  description       String?
  order             Int         @default(0)
  status            StageStatus @default(PENDING)
  startedAt         DateTime?
  completedAt       DateTime?
  temperature       Decimal?    @db.Decimal(5, 2)
  humidity          Decimal?    @db.Decimal(5, 2)
  duration          Int?        // in minutes
  instructions      String?
  notes             String?
  operatorId        String?
  isRequired        Boolean     @default(true)
  isIoTEnabled      Boolean     @default(false)
  sensorData        String?     // JSON for IoT sensor readings

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  productionBatch ProductionBatch @relation(fields: [productionBatchId], references: [id], onDelete: Cascade)
  operator        User?           @relation("OperatedBy", fields: [operatorId], references: [id])

  @@index([tenantId])
  @@map("processing_stages")
}

// Inventory Management
model StockMovement {
  id            String            @id @default(cuid())
  productId     String
  storeId       String?
  movementType  StockMovementType
  quantity      Int
  referenceType String?           // ORDER, ADJUSTMENT, TRANSFER, etc.
  referenceId   String?
  notes         String?
  createdAt     DateTime          @default(now())
  createdById   String

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  product   Product @relation(fields: [productId], references: [id])
  store     Store?  @relation(fields: [storeId], references: [id])
  createdBy User    @relation("CreatedBy", fields: [createdById], references: [id])

  @@index([tenantId])
  @@map("stock_movements")
}

// Enums
enum UserRole {
  SUPER_ADMIN           // Owner / Head Office - Full control
  ADMIN                 // Branch Manager - Manage assigned store
  SALES_STAFF           // POS User - Daily sales operations
  INVENTORY_STAFF       // Warehouse Staff - Stock management
  PRODUCTION_STAFF      // Lab/Production - Batch management
  PROCUREMENT_OFFICER   // Purchase Officer - Supplier & PO management
  ACCOUNTANT            // Finance & Accounts - Financial operations
  HR_MANAGER            // HR - Staff, payroll, attendance
  EVENT_STAFF           // Temporary location/exhibition POS
  EVENT_MANAGER         // Event Manager - Event profitability
  AUDITOR               // Read-only access for compliance
  MANAGER               // Legacy - Branch operations
  OWNER                 // Legacy - Kept for backwards compatibility
  USER                  // Basic user
}

enum StoreRole {
  MANAGER
  ASSISTANT_MANAGER
  SALES_STAFF
  INVENTORY_STAFF
}

enum CustomerType {
  INDIVIDUAL
  CORPORATE
}

enum ProductType {
  RAW_MATERIAL
  SEMI_FINISHED
  FINISHED
}

enum ProductUnit {
  PIECE
  GRAM
  KILOGRAM
  TOLA
  MILLILITER
  LITER
  BOTTLE
  SET
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIAL
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  DIGITAL_WALLET
  CHEQUE
}

enum PurchaseOrderStatus {
  PENDING
  CONFIRMED
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
}

enum TransferStatus {
  PENDING
  APPROVED
  SHIPPED
  RECEIVED
  CANCELLED
}

enum ProductionStatus {
  PLANNED
  IN_PROGRESS
  AGING
  QUALITY_CHECK
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum QualityResult {
  PENDING
  PASS
  FAIL
  RETEST_REQUIRED
}

enum StageStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum StockMovementType {
  IN
  OUT
  ADJUSTMENT
  TRANSFER
}

// CRM & Marketing Models
model MarketingCampaign {
  id            String         @id @default(cuid())
  name          String
  description   String?        @db.Text
  type          CampaignType
  targetSegment String?
  startDate     DateTime
  endDate       DateTime
  budget        Decimal?       @db.Decimal(15, 2)
  status        CampaignStatus @default(DRAFT)
  createdBy     String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  segment   CustomerSegment?     @relation(fields: [targetSegment], references: [id])
  messages  CampaignMessage[]
  responses CampaignResponse[]

  @@index([tenantId])
  @@map("marketing_campaigns")
}

model CampaignMessage {
  id         String   @id @default(cuid())
  campaignId String
  subject    String
  body       String   @db.Text
  sentAt     DateTime @default(now())

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  campaign MarketingCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("campaign_messages")
}

model CampaignResponse {
  id         String   @id @default(cuid())
  campaignId String
  customerId String
  responseType String  // OPENED, CLICKED, CONVERTED
  createdAt  DateTime @default(now())

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  campaign MarketingCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  customer Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("campaign_responses")
}

model CustomerSegment {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  type        SegmentType
  criteria    Json?
  isActive    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  campaigns MarketingCampaign[]
  customers CustomerSegmentMember[]

  @@index([tenantId])
  @@map("customer_segments")
}

model CustomerSegmentMember {
  id         String   @id @default(cuid())
  segmentId  String
  customerId String
  addedAt    DateTime @default(now())

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  segment  CustomerSegment @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  customer Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([segmentId, customerId])
  @@index([tenantId])
  @@map("customer_segment_members")
}

model CustomerComplaint {
  id          String           @id @default(cuid())
  customerId  String
  orderId     String?
  subject     String
  description String           @db.Text
  priority    ComplaintPriority @default(MEDIUM)
  category    ComplaintCategory @default(OTHER)
  status      ComplaintStatus   @default(OPEN)
  assignedTo  String?
  resolution  String?          @db.Text
  createdBy   String
  createdAt   DateTime         @default(now())
  resolvedAt  DateTime?
  updatedAt   DateTime         @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  customer   Customer @relation(fields: [customerId], references: [id])
  order      Order?   @relation(fields: [orderId], references: [id])
  assignedUser User?  @relation("AssignedComplaints", fields: [assignedTo], references: [id])

  @@index([tenantId])
  @@map("customer_complaints")
}

// Loyalty & VIP Models
model LoyaltyPointsTransaction {
  id          String              @id @default(cuid())
  customerId  String
  points      Int
  type        LoyaltyTransactionType
  orderId     String?
  description String?
  expiryDate  DateTime?
  createdBy   String
  createdAt   DateTime            @default(now())

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  customer Customer @relation(fields: [customerId], references: [id])
  order    Order?   @relation(fields: [orderId], references: [id])

  @@index([tenantId])
  @@map("loyalty_points_transactions")
}

model VIPEvent {
  id            String   @id @default(cuid())
  name          String
  description   String?  @db.Text
  eventDate     DateTime
  location      String?
  maxAttendees  Int?
  isExclusive   Boolean  @default(true)
  minimumTier   String?
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  attendees VIPEventAttendee[]

  @@index([tenantId])
  @@map("vip_events")
}

model VIPEventAttendee {
  id         String   @id @default(cuid())
  eventId    String
  customerId String
  registeredAt DateTime @default(now())
  attended   Boolean  @default(false)

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  event    VIPEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id])

  @@unique([eventId, customerId])
  @@index([tenantId])
  @@map("vip_event_attendees")
}

// Finance & Accounting Models
model VATReturn {
  id             String         @id @default(cuid())
  periodStart    DateTime
  periodEnd      DateTime
  totalSales     Decimal        @db.Decimal(15, 2)
  totalPurchases Decimal        @db.Decimal(15, 2)
  outputVAT      Decimal        @db.Decimal(15, 2)
  inputVAT       Decimal        @db.Decimal(15, 2)
  netVAT         Decimal        @db.Decimal(15, 2)
  status         VATReturnStatus @default(DRAFT)
  submittedAt    DateTime?
  paidAt         DateTime?
  createdBy      String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("vat_returns")
}

model BankAccount {
  id            String   @id @default(cuid())
  accountName   String
  accountNumber String   @unique
  bankName      String
  branch        String?
  currency      String   @default("AED")
  balance       Decimal  @db.Decimal(15, 2) @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  transactions     BankTransaction[]
  reconciliations  BankReconciliation[]

  @@index([tenantId])
  @@map("bank_accounts")
}

model BankTransaction {
  id               String    @id @default(cuid())
  bankAccountId    String
  transactionDate  DateTime
  description      String
  reference        String?
  amount           Decimal   @db.Decimal(15, 2)
  type             TransactionType
  balance          Decimal?  @db.Decimal(15, 2)
  isReconciled     Boolean   @default(false)
  reconciliationId String?
  createdAt        DateTime  @default(now())

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  bankAccount    BankAccount         @relation(fields: [bankAccountId], references: [id])
  reconciliation BankReconciliation? @relation(fields: [reconciliationId], references: [id])

  @@index([tenantId])
  @@map("bank_transactions")
}

model BankReconciliation {
  id               String              @id @default(cuid())
  bankAccountId    String
  statementDate    DateTime
  statementBalance Decimal             @db.Decimal(15, 2)
  bookBalance      Decimal             @db.Decimal(15, 2)
  difference       Decimal             @db.Decimal(15, 2)
  status           ReconciliationStatus @default(PENDING)
  createdBy        String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  bankAccount  BankAccount       @relation(fields: [bankAccountId], references: [id])
  transactions BankTransaction[]

  @@index([tenantId])
  @@map("bank_reconciliations")
}

// HR & Payroll Models
model Employee {
  id             String   @id @default(cuid())
  userId         String   @unique
  employeeCode   String   @unique
  department     String?
  position       String?
  hireDate       DateTime
  basicSalary    Decimal  @db.Decimal(10, 2)
  allowances     Decimal? @db.Decimal(10, 2)
  deductions     Decimal? @db.Decimal(10, 2)
  commissionRate Decimal? @db.Decimal(5, 2)
  hourlyRate     Decimal? @db.Decimal(10, 2)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  payrolls    Payroll[]
  attendances Attendance[]
  leaves      Leave[]

  @@index([tenantId])
  @@map("employees")
}

model Payroll {
  id          String        @id @default(cuid())
  employeeId  String
  periodStart DateTime
  periodEnd   DateTime
  basicSalary Decimal       @db.Decimal(10, 2)
  allowances  Decimal       @db.Decimal(10, 2) @default(0)
  deductions  Decimal       @db.Decimal(10, 2) @default(0)
  commission  Decimal       @db.Decimal(10, 2) @default(0)
  overtime    Decimal       @db.Decimal(10, 2) @default(0)
  grossSalary Decimal       @db.Decimal(10, 2)
  netSalary   Decimal       @db.Decimal(10, 2)
  status      PayrollStatus @default(PENDING)
  paidAt      DateTime?
  createdBy   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id])

  @@index([tenantId])
  @@map("payroll")
}

model Attendance {
  id            String    @id @default(cuid())
  employeeId    String
  date          DateTime  @db.Date
  checkIn       DateTime?
  checkOut      DateTime?
  hoursWorked   Decimal?  @db.Decimal(4, 2)
  overtimeHours Decimal?  @db.Decimal(4, 2)
  status        AttendanceStatus @default(PRESENT)
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, date])
  @@index([tenantId])
  @@map("attendance")
}

model Leave {
  id          String      @id @default(cuid())
  employeeId  String
  leaveType   LeaveType
  startDate   DateTime    @db.Date
  endDate     DateTime    @db.Date
  days        Int
  reason      String?     @db.Text
  status      LeaveStatus @default(PENDING)
  approvedBy  String?
  approvedAt  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id])

  @@index([tenantId])
  @@map("leaves")
}

// Sales & Promotions Models
model GiftCard {
  id           String          @id @default(cuid())
  code         String          @unique
  initialValue Decimal         @db.Decimal(10, 2)
  balance      Decimal         @db.Decimal(10, 2)
  currency     String          @default("AED")
  issuedTo     String?
  issuedDate   DateTime        @default(now())
  expiryDate   DateTime?
  status       GiftCardStatus  @default(ACTIVE)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  transactions GiftCardTransaction[]

  @@index([tenantId])
  @@map("gift_cards")
}

model GiftCardTransaction {
  id          String   @id @default(cuid())
  giftCardId  String
  orderId     String?
  amount      Decimal  @db.Decimal(10, 2)
  type        TransactionType
  description String?
  createdAt   DateTime @default(now())

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  giftCard GiftCard @relation(fields: [giftCardId], references: [id])
  order    Order?   @relation(fields: [orderId], references: [id])

  @@index([tenantId])
  @@map("gift_card_transactions")
}

model Discount {
  id            String        @id @default(cuid())
  code          String        @unique
  name          String
  description   String?       @db.Text
  type          DiscountType
  value         Decimal       @db.Decimal(10, 2)
  minPurchase   Decimal?      @db.Decimal(10, 2)
  maxDiscount   Decimal?      @db.Decimal(10, 2)
  startDate     DateTime
  endDate       DateTime
  usageLimit    Int?
  usageCount    Int           @default(0)
  isActive      Boolean       @default(true)
  applicableTo  Json?         // Product IDs, categories, etc.
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("discounts")
}

model Promotion {
  id          String         @id @default(cuid())
  name        String
  description String?        @db.Text
  type        PromotionType
  conditions  Json           // Buy X Get Y, Spend amount get discount, etc.
  rewards     Json           // What customer gets
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean        @default(true)
  priority    Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("promotions")
}

// Additional Enums
enum CampaignType {
  EMAIL
  SMS
  WHATSAPP
  PUSH_NOTIFICATION
  MULTI_CHANNEL
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum SegmentType {
  VIP
  REGULAR
  CORPORATE
  RETAIL
  WHOLESALE
  CUSTOM
}

enum ComplaintPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ComplaintCategory {
  PRODUCT_QUALITY
  DELIVERY
  SERVICE
  PRICING
  OTHER
}

enum ComplaintStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum LoyaltyTransactionType {
  EARNED
  REDEEMED
  EXPIRED
  ADJUSTED
}

enum VATReturnStatus {
  DRAFT
  SUBMITTED
  PAID
}

enum TransactionType {
  DEBIT
  CREDIT
}

enum ReconciliationStatus {
  PENDING
  RECONCILED
  DISCREPANCY
}

enum PayrollStatus {
  PENDING
  APPROVED
  PAID
  CANCELLED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  LEAVE
}

enum LeaveType {
  ANNUAL
  SICK
  EMERGENCY
  UNPAID
  MATERNITY
  PATERNITY
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum GiftCardStatus {
  ACTIVE
  USED
  EXPIRED
  CANCELLED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum PromotionType {
  BUY_X_GET_Y
  SPEND_GET_DISCOUNT
  BUNDLE_DEAL
  FLASH_SALE
}

// Sampling & Trial Management Models
model SamplingSession {
  id                String           @id @default(cuid())
  sessionNumber     String           @unique
  customerId        String?
  customerName      String?
  customerPhone     String?
  customerEmail     String?
  customerType      String?          // walk-in, returning, vip
  isAnonymous       Boolean          @default(false)
  storeId           String
  staffId           String
  outcome           SamplingOutcome
  saleAmount        Decimal?         @db.Decimal(10, 2)
  notPurchaseReason String?
  notes             String?          @db.Text
  totalTesterCost   Decimal          @db.Decimal(10, 2)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  customer       Customer?           @relation(fields: [customerId], references: [id])
  store          Store               @relation(fields: [storeId], references: [id])
  staff          User                @relation("SamplingStaff", fields: [staffId], references: [id])
  testedProducts SamplingProduct[]

  @@index([tenantId])
  @@map("sampling_sessions")
}

model SamplingProduct {
  id            String   @id @default(cuid())
  sessionId     String
  productId     String
  productName   String
  productCode   String
  productType   String   // perfume, oud, attar
  quantityUsed  Decimal  @db.Decimal(10, 3)
  unit          String
  costPerUnit   Decimal  @db.Decimal(10, 2)
  totalCost     Decimal  @db.Decimal(10, 2)
  createdAt     DateTime @default(now())

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  session SamplingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id])

  @@index([tenantId])
  @@map("sampling_products")
}

model TesterStock {
  id               String   @id @default(cuid())
  productId        String   @unique
  currentStock     Decimal  @db.Decimal(10, 3)
  minLevel         Decimal  @db.Decimal(10, 3)
  unit             String
  lastRefillDate   DateTime?
  lastRefillAmount Decimal? @db.Decimal(10, 3)
  monthlyUsage     Decimal  @db.Decimal(10, 3) @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  product Product @relation(fields: [productId], references: [id])

  @@index([tenantId])
  @@map("tester_stock")
}

model TesterRefill {
  id          String           @id @default(cuid())
  productId   String
  quantity    Decimal          @db.Decimal(10, 3)
  unit        String
  sourceType  TesterSourceType
  cost        Decimal          @db.Decimal(10, 2)
  refilledBy  String
  notes       String?
  createdAt   DateTime         @default(now())

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  product    Product @relation(fields: [productId], references: [id])
  refilledByUser User @relation("TesterRefilledBy", fields: [refilledBy], references: [id])

  @@index([tenantId])
  @@map("tester_refills")
}

enum SamplingOutcome {
  PURCHASED
  NOT_PURCHASED
}

enum TesterSourceType {
  MAIN_INVENTORY
  PURCHASE
}

// ============================================
// MULTI-TENANT SAAS INFRASTRUCTURE
// ============================================

model Tenant {
  id                String          @id @default(cuid())
  name              String          // "Oud Palace Dubai"
  nameArabic        String?
  slug              String          @unique // "oud-palace-dubai"
  domain            String?         @unique // custom domain

  // Business Info
  businessType      BusinessType    @default(RETAIL)
  tradeLicense      String?
  vatNumber         String?

  // Contact
  ownerName         String
  ownerEmail        String
  ownerPhone        String
  address           String?
  emirate           String?
  city              String?

  // Branding
  logoUrl           String?
  primaryColor      String?         @default("#FF6B35")
  secondaryColor    String?         @default("#004E89")

  // Subscription
  plan              SubscriptionPlan @default(TRIAL)
  planStartDate     DateTime        @default(now())
  planEndDate       DateTime?
  billingCycle      BillingCycle    @default(MONTHLY)
  maxUsers          Int             @default(5)
  maxStores         Int             @default(1)
  maxProducts       Int             @default(500)

  // Features
  features          Json            // {pos: true, production: false, events: true}

  // Status
  status            TenantStatus    @default(TRIAL)
  isActive          Boolean         @default(true)
  trialEndsAt       DateTime?
  suspendedAt       DateTime?
  suspensionReason  String?

  // Metrics
  totalSales        Decimal         @default(0) @db.Decimal(15, 2)
  totalOrders       Int             @default(0)
  activeUsers       Int             @default(0)
  storageUsed       BigInt          @default(0) // in bytes

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  categories        Category[]
  brands            Brand[]
  subscriptions     TenantSubscription[]
  invoices          TenantInvoice[]
  apiKeys           TenantApiKey[]
  users             User[]
  userStores        UserStore[]
  customers         Customer[]
  suppliers         Supplier[]
  products          Product[]
  stores            Store[]
  storeInventory    StoreInventory[]
  transfers         Transfer[]
  transferItems     TransferItem[]
  orders            Order[]
  orderItems        OrderItem[]
  payments          Payment[]
  purchaseOrders    PurchaseOrder[]
  purchaseOrderItems PurchaseOrderItem[]
  recipes           Recipe[]
  recipeIngredients RecipeIngredient[]
  recipeVersions    RecipeVersion[]
  materials         Material[]
  boms              BOM[]
  bomItems          BOMItem[]
  productionBatches ProductionBatch[]
  productionInputs  ProductionInput[]
  productionOutputs ProductionOutput[]
  qualityControls   QualityControl[]
  wastageRecords    WastageRecord[]
  processingStages  ProcessingStage[]
  stockMovements    StockMovement[]
  marketingCampaigns MarketingCampaign[]
  campaignMessages  CampaignMessage[]
  campaignResponses CampaignResponse[]
  customerSegments  CustomerSegment[]
  customerSegmentMembers CustomerSegmentMember[]
  customerComplaints CustomerComplaint[]
  loyaltyPointsTransactions LoyaltyPointsTransaction[]
  vipEvents         VIPEvent[]
  vipEventAttendees VIPEventAttendee[]
  vatReturns        VATReturn[]
  bankAccounts      BankAccount[]
  bankTransactions  BankTransaction[]
  bankReconciliations BankReconciliation[]
  employees         Employee[]
  payrolls          Payroll[]
  attendances       Attendance[]
  leaves            Leave[]
  giftCards         GiftCard[]
  giftCardTransactions GiftCardTransaction[]
  discounts         Discount[]
  promotions        Promotion[]
  samplingSessions  SamplingSession[]
  samplingProducts  SamplingProduct[]
  testerStocks      TesterStock[]
  testerRefills     TesterRefill[]
  segregationBatches SegregationBatch[]
  segregationOutputs SegregationOutput[]
  distillationBatches DistillationBatch[]
  distillationLogs  DistillationLog[]
  blendingRecipes   BlendingRecipe[]
  blendingIngredients BlendingIngredient[]
  agingBatches      AgingBatch[]
  customerFeedback  CustomerFeedback[]
  popupLocations    PopupLocation[]
  eventStaff        EventStaff[]
  eventInventory    EventInventory[]
  countryConfigs    CountryConfig[]
  exchangeRates     ExchangeRate[]

  @@map("tenants")
}

model TenantSubscription {
  id              String            @id @default(cuid())
  tenantId        String
  plan            SubscriptionPlan
  status          SubscriptionStatus @default(ACTIVE)
  startDate       DateTime          @default(now())
  endDate         DateTime?
  price           Decimal           @db.Decimal(10, 2)
  currency        String            @default("AED")
  billingCycle    BillingCycle
  autoRenew       Boolean           @default(true)

  // Payment
  lastBilledAt    DateTime?
  nextBillingDate DateTime?
  paymentMethod   String?

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  tenant          Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("tenant_subscriptions")
}

model TenantInvoice {
  id              String          @id @default(cuid())
  tenantId        String
  invoiceNumber   String          @unique
  amount          Decimal         @db.Decimal(10, 2)
  currency        String          @default("AED")
  status          InvoiceStatus   @default(PENDING)
  dueDate         DateTime
  paidAt          DateTime?
  description     String?
  lineItems       Json            // Detailed breakdown

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  tenant          Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("tenant_invoices")
}

model TenantApiKey {
  id              String          @id @default(cuid())
  tenantId        String
  name            String
  key             String          @unique
  permissions     Json            // {read: true, write: false}
  lastUsedAt      DateTime?
  expiresAt       DateTime?
  isActive        Boolean         @default(true)

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  tenant          Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("tenant_api_keys")
}

// ============================================
// MULTI-TENANT ENUMS
// ============================================

enum BusinessType {
  RETAIL
  WHOLESALE
  BOTH
  PRODUCTION
  DISTRIBUTION
}

enum SubscriptionPlan {
  TRIAL           // 14 days free
  BASIC           // 1 store, 5 users, POS + Inventory
  PROFESSIONAL    // 5 stores, 20 users, + Production
  ENTERPRISE      // Unlimited, + Events + API
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum TenantStatus {
  TRIAL
  ACTIVE
  SUSPENDED
  CANCELLED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  SUSPENDED
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

// ============================================
// PLATFORM ADMIN (Software Provider)
// ============================================

model PlatformAdmin {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  name              String
  phone             String?
  role              PlatformAdminRole @default(PLATFORM_ADMIN)
  isActive          Boolean  @default(true)
  lastLogin         DateTime?

  // Permissions
  canManageTenants  Boolean  @default(true)
  canManageBilling  Boolean  @default(true)
  canViewAnalytics  Boolean  @default(true)
  canAccessAllData  Boolean  @default(false) // Super dangerous - only for owner

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("platform_admins")
}

enum PlatformAdminRole {
  PLATFORM_OWNER      // Full access to everything
  PLATFORM_ADMIN      // Manage tenants and billing
  SUPPORT_AGENT       // View-only, help customers
  DEVELOPER           // Technical access for maintenance
}

// ============================================
// SEGREGATION MANAGEMENT (Oud Industry-Specific)
// ============================================

model SegregationBatch {
  id              String   @id @default(cuid())
  batchNumber     String   @unique
  rawMaterial     Product  @relation("SegregationRawMaterial", fields: [rawMaterialId], references: [id])
  rawMaterialId   String
  rawQuantity     Decimal  @db.Decimal(10, 3)
  rawCost         Decimal  @db.Decimal(10, 2)
  segregationDate DateTime
  laborCost       Decimal  @db.Decimal(10, 2) @default(0)
  overheadCost    Decimal  @db.Decimal(10, 2) @default(0)
  totalCost       Decimal  @db.Decimal(10, 2)
  wastageQty      Decimal  @db.Decimal(10, 3) @default(0)
  wastagePercent  Decimal  @db.Decimal(5, 2) @default(0)
  wastageCost     Decimal  @db.Decimal(10, 2) @default(0)
  status          SegregationStatus @default(IN_PROGRESS)
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  outputs SegregationOutput[]

  @@index([tenantId])
  @@map("segregation_batches")
}

model SegregationOutput {
  id              String   @id @default(cuid())
  batch           SegregationBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  batchId         String
  gradeName       String   // Muri, Salla, Super, Custom
  product         Product  @relation("SegregationOutputProduct", fields: [productId], references: [id])
  productId       String
  quantity        Decimal  @db.Decimal(10, 3)
  yieldPercentage Decimal  @db.Decimal(5, 2)
  unitCost        Decimal  @db.Decimal(10, 2) // auto-calculated
  sellingPrice    Decimal  @db.Decimal(10, 2)
  profitMargin    Decimal  @db.Decimal(10, 2)
  createdAt       DateTime @default(now())

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("segregation_outputs")
}

enum SegregationStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// ============================================
// DISTILLATION & EXTRACTION TRACKING
// ============================================

model DistillationBatch {
  id              String   @id @default(cuid())
  batchNumber     String   @unique
  rawWood         Product  @relation("DistillationRawWood", fields: [rawWoodId], references: [id])
  rawWoodId       String
  woodWeight      Decimal  @db.Decimal(10, 3) // in kg
  woodCost        Decimal  @db.Decimal(10, 2)
  distillationDate DateTime
  temperature     Decimal? @db.Decimal(5, 2)
  pressure        Decimal? @db.Decimal(5, 2)
  duration        Int?     // in hours
  oilExtracted    Decimal? @db.Decimal(10, 3) // in ml
  yieldPercentage Decimal? @db.Decimal(5, 2) // auto-calculated
  qualityGrade    String?  // A, B, C, D
  costPerMl       Decimal? @db.Decimal(10, 2) // auto-calculated
  status          DistillationStatus @default(PREPARING)
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  logs DistillationLog[]

  @@index([tenantId])
  @@map("distillation_batches")
}

model DistillationLog {
  id              String   @id @default(cuid())
  batch           DistillationBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  batchId         String
  timestamp       DateTime @default(now())
  temperature     Decimal? @db.Decimal(5, 2)
  pressure        Decimal? @db.Decimal(5, 2)
  notes           String?  @db.Text
  recordedBy      User     @relation("DistillationRecordedBy", fields: [recordedById], references: [id])
  recordedById    String

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("distillation_logs")
}

enum DistillationStatus {
  PREPARING
  IN_PROCESS
  COOLING
  COMPLETED
  FAILED
}

// ============================================
// BLENDING RECIPES LIBRARY
// ============================================

model BlendingRecipe {
  id              String   @id @default(cuid())
  name            String
  nameArabic      String?
  sku             String   @unique
  description     String?  @db.Text
  version         Int      @default(1)
  baseQuantity    Decimal  @db.Decimal(10, 3) // e.g., 100ml
  baseUnit        String   // ml, gm, etc.
  totalCost       Decimal  @db.Decimal(10, 2) // auto-calculated
  sellingPrice    Decimal  @db.Decimal(10, 2)
  profitMargin    Decimal  @db.Decimal(10, 2)
  instructions    String?  @db.Text
  qualityChecks   Json?    // JSON array of checkpoints
  status          BlendingRecipeStatus @default(DRAFT)
  isActive        Boolean  @default(true)
  parentRecipe    BlendingRecipe? @relation("RecipeVersions", fields: [parentRecipeId], references: [id])
  parentRecipeId  String?
  versions        BlendingRecipe[] @relation("RecipeVersions")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  ingredients BlendingIngredient[]

  @@index([tenantId])
  @@map("blending_recipes")
}

model BlendingIngredient {
  id              String   @id @default(cuid())
  recipe          BlendingRecipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId        String
  ingredient      Product  @relation("BlendingIngredient", fields: [ingredientId], references: [id])
  ingredientId    String
  quantity        Decimal  @db.Decimal(10, 3)
  unit            String
  percentage      Decimal  @db.Decimal(5, 2) // % of total
  cost            Decimal  @db.Decimal(10, 2) // auto-calculated
  notes           String?
  order           Int      @default(0)

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("blending_ingredients")
}

enum BlendingRecipeStatus {
  DRAFT
  TESTING
  APPROVED
  ARCHIVED
}

// ============================================
// AGING & MATURATION MODULE
// ============================================

model AgingBatch {
  id              String   @id @default(cuid())
  batchNumber     String   @unique
  product         Product  @relation("AgingProduct", fields: [productId], references: [id])
  productId       String
  quantity        Decimal  @db.Decimal(10, 3)
  unit            String
  containerType   String   // Barrel, Tank, Bottle
  containerNumber String
  location        String
  startDate       DateTime
  targetDuration  Int      // in days
  expectedReady   DateTime // auto-calculated
  actualReady     DateTime?
  status          AgingStatus @default(AGING)
  qualityBefore   String?
  qualityAfter    String?
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("aging_batches")
}

enum AgingStatus {
  AGING
  READY
  EXTRACTED
  DISCARDED
}

// ============================================
// CUSTOMER FEEDBACK & REJECTION TRACKING
// ============================================

model CustomerFeedback {
  id              String   @id @default(cuid())
  customer        Customer @relation(fields: [customerId], references: [id])
  customerId      String
  product         Product? @relation("FeedbackProduct", fields: [productId], references: [id])
  productId       String?
  feedbackType    FeedbackType
  rating          Int?     // 1-5 stars
  rejectionReason RejectionReason?
  comments        String?  @db.Text
  sentiment       Sentiment // Auto-detected: POSITIVE, NEUTRAL, NEGATIVE
  actionTaken     String?
  followUpDate    DateTime?
  feedbackDate    DateTime @default(now())
  staff           User     @relation("FeedbackRecordedBy", fields: [staffId], references: [id])
  staffId         String

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("customer_feedback")
}

enum FeedbackType {
  PURCHASE_FEEDBACK
  REJECTION
  COMPLAINT
  SUGGESTION
  COMPLIMENT
}

enum RejectionReason {
  TOO_EXPENSIVE
  SCENT_NOT_PREFERRED
  LOW_QUALITY
  PACKAGING_ISSUE
  AVAILABILITY_ISSUE
  COMPETITOR_PREFERRED
  OTHER
}

enum Sentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

// ============================================
// POP-UP & TEMPORARY LOCATIONS (Events)
// ============================================

model PopupLocation {
  id              String   @id @default(cuid())
  name            String
  type            PopupType
  location        String
  startDate       DateTime
  endDate         DateTime
  setupCost       Decimal  @db.Decimal(10, 2) @default(0)
  rentalCost      Decimal  @db.Decimal(10, 2) @default(0)
  otherCosts      Decimal  @db.Decimal(10, 2) @default(0)
  totalCost       Decimal  @db.Decimal(10, 2) // auto-calculated
  revenue         Decimal  @db.Decimal(10, 2) @default(0)
  profit          Decimal  @db.Decimal(10, 2) @default(0) // auto-calculated
  roi             Decimal  @db.Decimal(5, 2) @default(0)  // auto-calculated
  status          PopupStatus @default(PLANNED)
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  assignedStaff EventStaff[]
  inventory     EventInventory[]

  @@index([tenantId])
  @@map("popup_locations")
}

model EventStaff {
  id              String   @id @default(cuid())
  event           PopupLocation @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId         String
  staff           User     @relation("EventStaffAssigned", fields: [staffId], references: [id])
  staffId         String
  role            String
  dailyCost       Decimal  @db.Decimal(10, 2)

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("event_staff")
}

model EventInventory {
  id              String   @id @default(cuid())
  event           PopupLocation @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId         String
  product         Product  @relation("EventInventoryProduct", fields: [productId], references: [id])
  productId       String
  quantityAllocated Decimal @db.Decimal(10, 3)
  quantitySold    Decimal  @db.Decimal(10, 3) @default(0)
  quantityReturned Decimal @db.Decimal(10, 3) @default(0)

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("event_inventory")
}

enum PopupType {
  EXHIBITION
  FAIR
  MARKET
  MALL_KIOSK
  FESTIVAL
  CORPORATE_EVENT
}

enum PopupStatus {
  PLANNED
  SETUP
  ACTIVE
  COMPLETED
  CANCELLED
}

// ============================================
// MULTI-COUNTRY SUPPORT
// ============================================

model CountryConfig {
  id              String   @id @default(cuid())
  countryCode     String   @unique // AE, SA, IN, etc.
  countryName     String
  currency        String
  taxName         String   // VAT, GST, etc.
  taxRate         Decimal  @db.Decimal(5, 2)
  defaultUnit     String   // tola, ml, gm
  invoiceFormat   Json?    // JSON template
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("country_configs")
}

model ExchangeRate {
  id              String   @id @default(cuid())
  fromCurrency    String
  toCurrency      String
  rate            Decimal  @db.Decimal(10, 6)
  effectiveDate   DateTime
  createdAt       DateTime @default(now())

  // Multi-tenancy
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("exchange_rates")
}